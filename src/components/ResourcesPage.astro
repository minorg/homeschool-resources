---
import type { CollectionEntry } from "astro:content";
import ResourceCard from "@/components/ResourceCard.astro";
import BaseLayout from "@/layouts/BaseLayout.astro";

type Resource = CollectionEntry<"resources">;

interface Props {
    readonly resources: Resource[];
    readonly title: string;
}

const { resources, title } = Astro.props;

// 1. Fetch all resources
// 2. Sort them for consistent ordering
resources.sort((left, right) => {
    const orderDiff = (left.data.order || 0) - (right.data.order || 0);
    if (orderDiff !== 0) {
        return orderDiff;
    }
    return left.data.title.localeCompare(right.data.title);
});

// 3. Create separate arrays for each category
const resourcesByType = resources.reduce(
    (map, resource) => {
        if (!map[resource.data.type]) {
            map[resource.data.type] = [];
        }
        map[resource.data.type]!.push(resource);
        return map;
    },
    {} as Record<Resource["data"]["type"], Resource[]>,
);

const resourceTypeLabels: Record<string, string> = {
    article: "Articles",
    book: "Books",
    curriculum: "Curricula",
    video: "Videos",
};
---

<BaseLayout title={title}>
    {
        Object.keys(resourcesByType)
            .toSorted((left, right) => left.localeCompare(right))
            .map((resourceType) => (
                <div>
                    <h2 class="text-lg font-bold mb-2 tracking-tight">
                        {resourceTypeLabels[resourceType]!}
                    </h2>
                    <div class="flex flex-col gap-6 mb-8">
                        {resourcesByType[
                            resourceType as keyof typeof resourcesByType
                        ].map((resource) => (
                            <ResourceCard resource={resource} />
                        ))}
                    </div>
                </div>
            ))
    }
</BaseLayout>
